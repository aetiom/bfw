#!/usr/bin/env php
<?php
# Load BFW Modules script : Read all dir in vendor for find bfw modules and create symlink to modules dir
#
# dateCreate : 2014-03-04
# version : 2.0.0
# author : bulton-fr

echo __DIR__."\n";
$rootPath = __DIR__.'/..';

$exist = false;
$iTest = 0;
do
{
	if(!file_exists($rootPath.'/autoload.php') && !file_exists($rootPath.'/composer'))
	{
		$rootPath .= '/..';
	}
	else {$exist = true;}
	
	if($iTest > 9) //Securit&
	{
		echo "\033[1;31mLe répertoire contenant composer n'a pu être trouvé !\033[0m\n";
		die;
	}
	
	$iTest++;
}
while(!$exist);

$listModulesFind = array();

//Class de lecture des dossiers.
//Une class pour éviter de tomber dans les sécurités de récursivité d'appel de fonction
class readDir
{
	/**
	 * @var $list : Référence vers l'array stockant la liste des path de modules trouvés
	 */
	private $list = array();
	
	/**
	 * @var $ignore : Les éléments à ignorer lors de la lecture du dossier
	 */
	private $ignore = array('.', '..');
	
	/*
	 * Constructeur
	 * 
	 * @param array (ref) $listModuleFind : Liste des modules trouvé
	 */
	public function __construct()
	{
		global $listModulesFind;	
		$this->list = &$listModulesFind;
	}
	
	/**
	 * Méthode de lecture d'un dossier
	 *
	 * @param string $path : Le chemin à lire
	 */
	public function read($path)
	{
		$dir = opendir($path); //Ouverture du dossier à lire
		
		if($dir !== false)
		{
			//Tant qu'il y a des fichiers à lire dans le dossier
			while(($file = readdir($dir)) !== false)
			{
				if(!in_array($file, $this->ignore))
				{
					//Si le fichier d'initialisation du modules existes
					if(file_exists($path.'/bfw_modules_info.php'))
					{
						$this->list[] = $path; //On ajoute le chemin courant à la liste
						break;
					}
					
					//Si l'élément lu est un dossier
					if(is_dir($path.'/'.$file))
					{
						//On le lit à son tour
						$read = new readDir();
						$read->read($path.'/'.$file);
					}
				}
			}
			
			closedir($dir); //Fermeture du dossier lu
		}
	}
}

if(!(!file_exists(realpath($rootPath.'/..').'/configs/') || !file_exists(realpath($rootPath.'/..').'/modules/')))
{
	//Lance la lecture du dossier vendor
	$read = new readDir();
	$read->read($rootPath.'/');

	//Si des modules ont été trouvé
	if(count($listModulesFind) > 0)
	{
		//Pour chaque module trouvé dans le vendor
		foreach($listModulesFind as $moduleFindPath)
		{
			//On obtient le nom du module
			$modules = explode('/', $moduleFindPath);
			$module = $modules[(count($modules)-1)];
			
			//Et on tente de créer le lien symbolique
			echo 'Création du lien symbolique de '.$module.' : ';
			
			$result = '';
			if(!file_exists(realpath($rootPath.'/..').'/modules/'.$module))
			{
				if(symlink(realpath($moduleFindPath), realpath($rootPath.'/..').'/modules/'.$module))
				{
					$result .= "...\033[1;32m Done\033[0m\n";
					
					/*
					<?php
					$modulePath = 'src';
					$configFiles = array('config.php');
					?>
					*/
					$result .= '    Recherche de fichiers de configs ... ';
					require_once(realpath($moduleFindPath).'/bfw_modules_info.php');
					if(isset($modulePath) && isset($configFiles) && is_array($configFiles) && is_string($modulePath))
					{
						$result .= "\033[0;33m ".count($configFiles)." fichier(s) trouvé(s)\033[0m\n";
						
						$result .= '    Création du répertoire de config pour le module ...';
						$createConfigDirFail = false;
						
						if(!file_exists(realpath($rootPath.'/..').'/configs/'.$module))
						{
							if(mkdir(realpath($rootPath.'/..').'/configs/'.$module, 0755))
							{
								$result .= "...\033[1;32m Done";
							}
							else
							{
								$result .= "...\033[1;31m Fail !";
								$createConfigDirFail = true;
							}
						}
						else {$result .= "...\033[1;33m Existe déjà.";}
						$result .= "\033[0m\n";
						
						if($createConfigDirFail == false)
						{
							$result .= '    Copie des fichiers de configs : '."\n";
							foreach($configFiles as $config)
							{
								$result .= '        > Copie du fichier '.$config.' : ';
								
								if(!file_exists(realpath($rootPath.'/..').'/configs/'.$module.'/'.$config))
								{
									if(file_exists(realpath($moduleFindPath).'/'.$modulePath.'/'.$config))
									{
										if(copy(realpath($moduleFindPath).'/'.$modulePath.'/'.$config, realpath($rootPath.'/..').'/configs/'.$module.'/'.$config))
										{
											$result .= "...\033[1;32m Done";
										}
										else {$result .= "...\033[1;31m Fail !";}
									}
									else {$result .= "...\033[1;31m Fichier source non trouvé : Fail !";}
								}
								else {$result .= "...\033[1;33m Existe déjà.\n";}
							}
						}
						else
						{
							$result .= "...\033[1;31m Fail !\n";
							$result .= 'Les fichiers de configs n\'ont pas été copié.';
						}
					}
					else {$result .= "\033[0;33m 0 fichier trouvé. \033[0m\n";}
					
					unset($modulePath, $configFiles);
				}
				else {$result .= "...\033[1;31m Fail !";}
			}
			else {$result .= "...\033[1;33m Non créer. Le module existe déjà !";}
			
			echo $result."\033[0m\n";
		}
	}
	else {echo "\033[0;33m Aucun module trouvé dans le vendor \033[0m\n";}
}
else {echo "\033[1;31mErreur : Les dossiers configs et/ou modules n'ont pas été trouvé.\nVeuillez réinstaller le framework !\033[0m\n";}
?>